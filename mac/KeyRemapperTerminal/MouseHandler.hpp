#pragma once

#include <ApplicationServices/ApplicationServices.h>
#include <iostream>
#include <chrono>
#include "./Global.hpp"

class MouseHandler {
private:
  static int clickCount;
  static std::string status;
  static double lastPressTime;

public:
  static double doubleClickSpeed;

public:
  static void handleMouseDownUp(bool isMouseDown, std::string mouseType = "left") {
    auto eventType = mouseType == "right" ?
      isMouseDown ? kCGEventRightMouseDown : kCGEventRightMouseDown
      : isMouseDown ? kCGEventLeftMouseDown : kCGEventLeftMouseUp;

    auto buttonType = mouseType == "right" ? kCGMouseButtonRight : kCGMouseButtonLeft;

    //get current mouse position
    CGEventRef tempEvent = CGEventCreate(NULL);
    auto mouseLoc  = CGEventGetLocation(tempEvent);

    eventType = isMouseDown ? mouseType == "right" ? kCGEventRightMouseDown : kCGEventLeftMouseDown : mouseType == "right" ? kCGEventRightMouseUp : kCGEventLeftMouseUp;

    if (isMouseDown) {
      double now = std::chrono::system_clock::now().time_since_epoch() / std::chrono::milliseconds(1);

      if (clickCount == 0 || now - lastPressTime > doubleClickSpeed)
        clickCount = 1;
      else
        clickCount = clickCount + 1;

      lastPressTime = now;
      status = "mouse_is_down";

      CGEventRef mouseEvent = CGEventCreateMouseEvent(NULL, eventType, mouseLoc, buttonType);
      CGEventSetIntegerValueField(mouseEvent, kCGMouseEventClickState, clickCount);
      CGEventPost(kCGHIDEventTap, mouseEvent);
      CFRelease(tempEvent);
      CFRelease(mouseEvent);

      return;
    }

    status = "mouse_is_up";
    CGEventRef mouseEvent = CGEventCreateMouseEvent(NULL, eventType, mouseLoc, buttonType);
    CGEventSetIntegerValueField(mouseEvent, kCGMouseEventClickState, clickCount);
    CGEventPost(kCGHIDEventTap, mouseEvent);
    CFRelease(tempEvent);
    CFRelease(mouseEvent);
  }

  static void setModifierFlagsToNativeMouseEvent(CGEventRef event) {
    CGEventFlags flags = 0;

    if (Global::isCmdDown) flags = flags | kCGEventFlagMaskCommand;
    if (Global::isShiftDown) flags = flags | kCGEventFlagMaskShift;
    if (Global::isAltDown) flags = flags | kCGEventFlagMaskAlternate;
    if (Global::isCtrlDown) flags = flags | kCGEventFlagMaskControl;
    if (Global::isFnDown) flags = flags | kCGEventFlagMaskSecondaryFn;

    auto eventType = CGEventGetType(event);
    bool isMoving = eventType == kCGEventMouseMoved;
    bool isDragging = eventType == kCGEventLeftMouseDragged || eventType == kCGEventRightMouseDragged;

    if (!isMoving && !isDragging) return CGEventSetFlags(event, flags);

    if (status == "mouse_is_down") {
      CGEventSetType(event, kCGEventLeftMouseDragged);
    } else if (status == "mouse_is_up") {
      CGEventSetType(event, kCGEventMouseMoved);
      status = {};
    }

    clickCount = 0;
    CGEventSetFlags(event, flags);
  }

  static void initialize() {
    // apparently, real mouse events don't register modifier presses generated by this app. So I have to listen for mouse events and attach the modifier flags accordingly
    auto myEventTap = CGEventTapCreate(kCGHIDEventTap, kCGHeadInsertEventTap, kCGEventTapOptionDefault,
      CGEventMaskBit(kCGEventLeftMouseDown) |
      CGEventMaskBit(kCGEventLeftMouseUp) |
      CGEventMaskBit(kCGEventLeftMouseDragged) |
      CGEventMaskBit(kCGEventRightMouseDown) |
      CGEventMaskBit(kCGEventRightMouseUp) |
      CGEventMaskBit(kCGEventRightMouseDragged) |
      CGEventMaskBit(kCGEventMouseMoved),
      [](CGEventTapProxy proxy, CGEventType type, CGEventRef event, void *refcon) {
         setModifierFlagsToNativeMouseEvent(event);
         return event;
       }, NULL);

    if (!myEventTap) {
      std::cout << "Accesibility disabled for this app";
      return;
    }

    auto myRunLoopSource = CFMachPortCreateRunLoopSource(kCFAllocatorDefault, myEventTap, 0);

    if (!myEventTap) {
      std::cout << "Couldn't create runLoopSource";
      return;
    }

    CFRunLoopAddSource(CFRunLoopGetMain(), myRunLoopSource, kCFRunLoopDefaultMode);
  }
};

std::string MouseHandler::status;
int MouseHandler::clickCount = 0;
double MouseHandler::lastPressTime = 0;
double MouseHandler::doubleClickSpeed = 500;
